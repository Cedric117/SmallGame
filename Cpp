#include "stdafx.h"#include <Windows.h>#include <string>#include <algorithm>#include <vector>#include <iostream>#include <stdio.h>#include <conio.h>#define EMPTY ' '#define BLACK 'X'#define WHITE 'O'
using namespace std;
struct Position{ int x; int y;};void HideCursor();void SetPos(COORD a);void SetPos(int i, int j);void disPlayBoard(const vector<vector<char>>& board);                                          //打印棋盘void playerMove(vector<vector<char>>& board, char piece,Position& pos);                                  //移动棋子函数char opponent(char piece);                                                                                                 //切换棋子inline bool isLegal(int row, int col, const vector<vector<char>>& board);              //判断一步棋是否合法 所要走的坐标是否为空void instructions(){ SetPos(49, 4); cout << "===五子棋游戏==="; SetPos(46, 5); cout << "----------------------"; SetPos(45, 6); cout << "将五个棋子连在一起则获胜"; SetPos(2, 24);}void CheckWinner(int row, int col, char piece, const vector<vector<char>>& board){ int cnt = 0; bool win = false;
 for (int i = 0; i < 5; i++)                                                 //竖直方向上检测 {  cnt == 0;  for (int j = 0; j < 5; j++)  {   if ((row + j - i) >= 0)   {    if (board[row + j - i][col] == piece)     cnt++;    if (cnt == 5)     win == true;   }   else    break;  } }
 for (int i = 0; i < 5; i++)                                                    //水平方向检测 {  cnt == 0;  for (int j = 0; j < 5; j++)  {   if ((col + j - i) >= 0)   {    if (board[row][col + j - i] == piece)     cnt++;    if (cnt == 5)     win == true;   }   else    break;  } } if (win == true) {  cout << piece << "获得游戏胜利！"; }}
int main(){ const unsigned int row = 10; vector<char> col (12,EMPTY); vector<vector<char>> board(row, col); char turn = BLACK; Position Pos = { 0,0 };
 disPlayBoard(board); instructions(); while (1) {  playerMove(board, turn ,Pos);  turn = opponent(turn); }
 system("pause");
    return 0;}
void disPlayBoard(const vector<vector<char>>& board)                  //显示棋盘函数{ cout << "   "; for (int u = 0; u < 12; u++) {  if (u >= 9)  {   cout << u + 1 << " ";  }  else   cout << u + 1 << "  "; } cout << "\n"; for (int v = 0; v < 11; v++) {  if (v == 0)  {   cout << " ┌";   for (int i = 0; i < 11; i++)   {    cout << " ┬";   }   cout << " ┐\n";   cout << v + 1;   for (int j = 0; j < 12; j++)   {    cout << "  " << board[v][j];   }  }  else if (v >= 1 && v <= 9)  {   cout << " ├";   for (int i = 0; i < 11; i++)   {    cout << " ┼";   }   cout << " ┤\n";   cout << v + 1;   for (int j = 0; j < 12; j++)   {    if (v == 9)    {     cout << " " << board[v][j] << " ";    }    else     cout << "  " << board[v][j];   }  }  else  {   cout << " └";   for (int i = 0; i < 11; i++)   {    cout << " ┴";   }   cout << " ┘\n";  }
  cout << "\n"; }}
void SetPos(COORD a){ HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE); SetConsoleCursorPosition(out, a);}             //坐标
void SetPos(int i, int j){ COORD pos = { i,j }; SetPos(pos);}    
void HideCursor(){ CONSOLE_CURSOR_INFO cursor_info = { 1, 0 }; SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursor_info);}
void playerMove(vector<vector<char>>& board, char piece,Position& pos)                  //移动棋子函数{ int x, y; start: do {  SetPos(0, 22);  cout << "现在轮到'"<< piece <<"'落子，请选择要下的位置的坐标：\n" << "(";  cin >> x;  SetPos(2, 23);  cout << "  ,  ";  cin >> y;  SetPos(8, 23);  cout << ")";  system("cls");  disPlayBoard(board);  instructions(); } while ((x > 10) || (x < 1) || (y > 12) || (y < 1));
 if (isLegal(x, y, board)) {  board[x - 1][y - 1] = piece; } else {  cout << "该位置已经被占用，请重新选择坐标";  goto start; }
 system("cls");
 disPlayBoard(board);
 instructions();
 pos = { x, y };}
char opponent(char piece){ if (piece == BLACK)  return WHITE; else  return BLACK;}
inline bool isLegal(int row, int col, const vector<vector<char>>& board)              //判断一步棋是否合法 所要走的坐标是否为空{ return (board[row - 1][col - 1] == EMPTY);}
